@page "/LightStripClient"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavManager
@using WebControlClient.Client.Components
@using WebControlClient.Client.Sockets
@implements IAsyncDisposable

@if (_socketClient == null || _socketClient.IsClosed)
{
	<div>
		<section class="field-row">
			<div class="field-row-stacked" style="width: 200px">
				<label for="lsc-address">Address</label>
				<input id="lsc-address" type="text" @bind="IpValue" @bind:event="onchange" />
			</div>
		</section>
		<section class="field-row">
			<div class="field-row-stacked" style="width: 50px">
				<label for="lsc-port">Port</label>
				<input id="lsc-port" type="text" @bind="PortValue" @bind:event="oninput" />
			</div>
		</section>
		<section class="field-row">
			<button @onclick="OnConnectClick" disabled="@IsConnecting">@(IsConnecting ? "Connecting..." : "Connect")</button>
			<div>
				<input @bind="AutoConnect" type="checkbox" id="auto-connect">
				<label for="auto-connect">auto-connect</label>
			</div>
		</section>
	</div>
}
else
{
	<div>
		<fieldset>
			<legend>Stats</legend>
			<p>
				<span>Bound IP:</span>&nbsp;<span>@(ServerStatus?.BoundIp != null ? ServerStatus?.BoundIp : string.Empty)</span>
			</p>
			<p>
				<span>Bound Port:</span>&nbsp;<span>@(ServerStatus?.BoundIp != null ? ServerStatus?.BoundPort : string.Empty)</span>
			</p>
			<p>
				<span>Frame:</span>&nbsp;<span>@((ServerStatus?.Frame ?? 0).ToString())</span>
			</p>
		</fieldset>
		@if (ServerStatus != null)
		{
			<fieldset>
				<legend>IPs</legend>
				@foreach (var n in ServerStatus.NetworkInterfaces)
				{
					<p>
						<span>@(n.Name)</span>&nbsp;<span>@(n.Ip.ToString())</span>
					</p>
				}
			</fieldset>
		}
	</div>
}
<Modal Open="@ShowModal" Title="@ModalTitle" Body="@ModalBody" Buttons="@ModalButtons" Type="@ModalType" OnClose="@ModalOnClose" />

@code {
	private CancellationTokenSource _cancelSource;
	private bool IsConnecting { get; set; }

	private bool ShowModal { get; set; }
	private string ModalTitle { get; set; }
	private string ModalBody { get; set; }
	private ModalType ModalType { get; set; }
	private List<ModalButton> ModalButtons { get; set; }

	private SocketClient _socketClient;
	private System.Timers.Timer _updateStatusTimer;

	private WebControlClient.Shared.LightStripStatus ServerStatus { get; set; }
	//Used to disable the start/stop button until we get another server status back.
	private bool BlockStart { get; set; }

	private string _ipValue;
	private string IpValue
	{
		get
		{
			return _ipValue;
		}
		set
		{
			if (string.IsNullOrWhiteSpace(value))
				IpValid = false;
			else
				IpValid = true;

			_ipValue = value;
		}
	}
	private bool IpValid { get; set; }

	private int _portValueNum;
	private string _portValue;
	private string PortValue
	{
		get
		{
			return _portValue;
		}
		set
		{
			if (value == null || value.Length > 5)
				return;

			_portValue = value;
			if (int.TryParse(_portValue, out var i) && i > -1 && i < 65536)
			{
				_portValueNum = i;
				PortValid = true;
			}
			else
				PortValid = false;
		}
	}
	private bool PortValid = true;

	private bool AutoConnect { get; set; }

	protected override void OnInitialized()
	{
		ServerStatus = new WebControlClient.Shared.LightStripStatus();
		_cancelSource = new CancellationTokenSource();
		IpValue = "127.0.0.1";
		PortValue = "0";
		ModalButtons = new List<ModalButton>();

		_updateStatusTimer = new System.Timers.Timer();
		_updateStatusTimer.Elapsed += OnStatusUpdateTimer;
		_updateStatusTimer.Interval = 5 * 1000;
		_updateStatusTimer.Start();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			if (bool.TryParse((await localStorage.GetItemAsStringAsync("saautoconnect")), out var auto))
				AutoConnect = auto;
			var ips = await localStorage.GetItemAsStringAsync("saipadd");
			if (!string.IsNullOrWhiteSpace(ips))
				IpValue = ips;
			var ports = await localStorage.GetItemAsStringAsync("saipport");
			if (!string.IsNullOrWhiteSpace(ports))
				PortValue = ports;
			if (AutoConnect)
				await OnConnectClick();
		}
	}

	public async ValueTask DisposeAsync()
	{
		_updateStatusTimer?.Stop();
		_updateStatusTimer?.Dispose();
		if (_socketClient != null)
			await _socketClient.Close();
		_cancelSource?.Cancel();
	}

	private async void OnStatusUpdateTimer(object sender, System.Timers.ElapsedEventArgs e)
	{
		try
		{
			if (_socketClient == null || _socketClient.IsClosed)
				return;
			await _socketClient.Send(new ClientMessage() { ActionType = ClientMessageType.GetLSCState });
		}
		catch (Exception ex)
		{
			ModalType = ModalType.Error;
			ModalTitle = "Exception";
			ModalBody = ex.Message;
			ShowModal = true;
		}
	}

	private async Task OnConnectClick()
	{
		if (IsConnecting || (_socketClient != null && !_socketClient.IsClosed))
			return;
		if (!IpValid)
		{
			ModalType = ModalType.Warning;
			ModalTitle = "Invalid Input";
			ModalBody = "Address can not be empty.";
			ShowModal = true;
			return;
		}
		if (!PortValid)
		{
			ModalType = ModalType.Warning;
			ModalTitle = "Invalid Input";
			ModalBody = "Port is invalid. Must be in a number between 0 and 65535.";
			ShowModal = true;
			return;
		}

		await localStorage.SetItemAsync<string>("lscautoconnect", AutoConnect.ToString());
		if (AutoConnect)
		{
			await localStorage.SetItemAsync<string>("lscipadd", IpValue.ToString());
			await localStorage.SetItemAsync<string>("lscipport", PortValue.ToString());
		}

		IsConnecting = true;
		_ = Task.Run(() => OnConnect());
	}

	private async Task OnConnect()
	{
		try
		{
			if (NavManager.BaseUri.StartsWith("https:", StringComparison.InvariantCultureIgnoreCase))
				_socketClient = new SocketClient(_ipValue, _portValueNum, true, _cancelSource.Token);
			else
				_socketClient = new SocketClient(_ipValue, _portValueNum, false, _cancelSource.Token);
			_socketClient.OnClientResponse += OnSocketClientResponse;
			await _socketClient.Connect();
			var requestMessage = new ClientMessage()
			{
				ActionType = ClientMessageType.GetSAState
			};
			await _socketClient.Send(requestMessage);
		}
		catch (Exception ex)
		{
			ModalType = ModalType.Error;
			ModalTitle = "Exception";
			ModalBody = ex.Message;
			ShowModal = true;
		}
		finally
		{
			IsConnecting = false;
			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task OnSocketClientResponse(object sender, SocketClientResponseEventArgs e)
	{
		try
		{
			switch (e.Response.Type)
			{
				case ClientResponseType.SAData:
					{
						if (e.Response is ClientResponse<WebControlClient.Shared.LightStripStatus> res)
						{
							ServerStatus.CopyFrom(res.Data);
							BlockStart = false;
						}
						break;
					}
			}
		}
		catch (Exception ex)
		{
			ModalType = ModalType.Error;
			ModalTitle = "Exception";
			ModalBody = ex.Message;
			ShowModal = true;
		}
		await InvokeAsync(StateHasChanged);
	}

	private void ModalOnClose()
	{
		ShowModal = false;
		ModalButtons.Clear();
		ModalBody = string.Empty;
		ModalTitle = string.Empty;
		ModalType = ModalType.None;
		StateHasChanged();
	}
}