{
  "hueSettings": {
    "useHue": true, //Whether to use hue lighting or not
    "appKey": "", //set when connecting to bridge
    "entertainmentKey": "", //set when connecting to bridge
    "ip": "", //set when connecting to bridge
    "roomId": "", //set when connecting to bridge
    "hueType": 0, //0 = basic, 1 = entertainment. basic just sets all lights in a room/group and uses roomId. entertainment uses Hue entertainment groups and groupId setting.
    "updateFrameRate": 8, //HUE can only handle so many updates at once. anything above 8 is unreliable for basic. for Entertainment ~25 and below is fine.
    "turnLightOnIfOff": true, //If lights are off when reading started turn them on.
    "shutLightOffOnStop": true, //When reading is stopped turn lights off.
    "maxColorValue": 255, //A byte value (0-255) to clamp color value max to.
    "minColorValue": 0, //A byte value (0-255) to clamp color value min to.
    "minRoundColor": 4, //A byte value (0-255). If the r+g+b for a light is less than this value it will be rounded to 0. This is due to hue lights not reacting like standard LEDs at these low values and producing erratic results.
    "colorMultiplier": 1.0, //Multiply values sent to lights by this 0.0-2.0
    "colorChangeThreshold": 15, //a byte value (0-255) that if next color is within this range dont change colors. can help reduce flickering.
    "blendLastColorAmount": 0.6 //A value to blend the current color by the last color. This reduces response time a bit to give smoother color changes. 0.6 is a good value to start. (0.0-1.0)
  },
  "zoneProcessSettings": {
    "resizeScale": 3.0, //What to scale zone image by. Generally more zones means use a lower value to keep efficiency. ex 9x5 zones -> 27x15 image.
    "resizeSigma": 0.75, //The sigma to use for the gaussian resize. Higher values means more blur. More zones generally means to use a larger value. 0.4-0.6 is a good range.
    "resizeFilter": 2 //2 is a gaussian resize filter. Recommended to keep set as is. 0 = point, 1 = bilinear
  },
  "rgbDeviceSettings": {
    "useKeyboards": true, //Whether to display on connected rgb keyboards or not
    "useMice": true,  //Whether to display on connected rgb mice or not
    "useMotherboard": false, //Whether to display on connected rgb motherboards or not
	"useLightstrip": false, //Whether to display on other rgb devices connected to the motherboard rgb headers.
    "colorChangeThreshold": 5, //Byte threshold to determine if key color should change. This helps memory pressure by possibly not having to change key very frame even if it is the same.
    "colorMultiplier": 1.0, //Multiply values sent to rgb device by this 0.0-2.0
    "keyboardResReduce": 4, //Reduces the sample size of the keyboard layout. This is for layouts from rgb.net that represent keys as larger rects.
    "updateFrameRate": 60 //Can be used to throttle rate that rgb devices are allowed to update at
  },
  "ffmpegCaptureSettings": {
    "useFFMpeg": false, //Whether or not we are reading video input from ffmpeg. Requires ffmpeg to be in PATH.
    "lightsLocal": false, //Whether or not a light strip is connected to the pi to update or if it should send udp packets like a standard device.
    "width": 1280, //Dimensions of video for ffmpeg to output. This can be used to scale the video source in ffmpeg instead of using readResolutionReduce.
    "height": 720, //This can be more efficent instead of scaling later as it can do format conversion at the same time. Set readResolutionReduce to 1.0 if using this.
    "frameRate": 18, //The frame rate to read the video input. ffmpeg drops extra frames. recommended to keep below 20. Higher rates typically mean more delay in reading and updating lights.
    "skipFrames": 200, //An amount of frames to skip before updating lights. This can be used to skip hdmi causing flashes while the connection is starting.
    "inputWidth": 1280, //Dimensions of video from video input
    "inputHeight": 720,
    "inputFrameRate": 60, //The frame rate of the video source.
    "inputSource": "/dev/video0", //The source of video to pull from. probably somthing like "/dev/video0" on linux with v4l2, or "video=\"USB Video Device\"" on windows with directshow. https://trac.ffmpeg.org/wiki/Capture/Webcam
    "inputFormat": "v4l2", //"v4l2" on linux, "dshow" on windows.
    "inputPixelFormatType": "input_format", //"pixel_format" with dshow, "input_format" with v4l2.
    "inputPixelFormat": "yuv420p", //The format of the input for ffmpeg to read.
    "bufferMultiplier": 8, //Used for setting ffmpeg rtbufsize. 4-16. If it feels like a lot of frames are being dropped check ffmpeg output and see if its outputting "real-time buffer too full or near too full". If it is consistently increase this value.
	"threadQueueSize": 128, //Sets ffmpeg thread_queue_size. Raising may help with dropping frames along with bufferMultiplier.
    "ffmpegStdError": false, //Whether or not to allow ffmpeg to dump its statistics to console. Useful for debugging.
	"useGpu": false //Whether or not to use gpu for scale filter in ffmpeg. Can speed up processing but may restrict input formats. Only use if output width/height are different than input. NVIDIA gpu with CUDA required.
  },
  "socketSettings": {
    "enableHubSocket": true, //Whether to enable websocket server. This is used by WebControlClient to display running stats and config.
    "aspnetConsoleLog": false, //Enable logging of websocket server to console
    "listenPort": 34780, //Port for server to listen on.
    "listenAddress": "0.0.0.0", //Ip to bind server to.
    "sslCertLocation": "cert.pfx", //Path to a certificate to enable ssl for websocket connect. Optional.
    "sslCertPassword": "password", //Password for certificate. Optional.
    "sslProtocol": 15360 //Do not change unless you know how the SslProtocols enum works. Default value corrosponds to Tls12 and Tls13.
  },
  "adapterId": 0, //The id of the graphics adapter to use.
  "monitorId": 0, //The id of the monitor to read.
  "zoneColumns": 9, //How many columns to split image into. If you are using a keyboard for lighting generally higher values are better.
  "zoneRows": 5, //how many rows to split image into. If you are using a keyboard for lighting generally higher values are better.
  "screenReadFrameRate": 24, //Max rate screen can be read. In practice this can be up to around 30-35 fps.
  "dumpPngs": false, //Dump processed image zones into a image.
  "imageDumpLocation": "", //Path to dump images in
  "intrinsicsEnabled": false, //currently does nothing
  "readResolutionReduce": 2.0, //Reduce captured screen image size (ex. 2.0 is res * 0.5, 1920x1080->960x540). Adjust value based on screen resolution. getting image size to around 720p or lower is recommended.
  "debugTimings": false, //Whether or not to ouput timings of processing loop to console. Useful for debugging.
  "bitmapRect": null, //A rect to cut out of the captured screen for use. format is {"top": 0,"left": 0,"width": 1280,"height": 720}.
  "lightStripSettings": {
    "useLightStrip": true, //Whether or not to use a light strip
    "remoteAddress": "192.168.1.135", //Remote address of client for device that is connected to light strip for
    "remotePort": 9250, //Port to communicate with
    "colorMultiplier": 1.0, //Multiply values sent to lights by this 0.0-2.0
    "blendLastColorAmount": 0.4, //A value to blend the current color by the last color. This reduces response time a bit to give smoother color changes. 0.4 is a good value to start. (0.0-1.0)
    "saturateColors": 1.0, //A multiplier for the color saturation. Can help with color contrast a bit for a backlight. 1.1-1.3 are reasonable values to increase saturation. (0.0-5.0)
    "updateFrameRate": 24, //Can be used to throttle rate that light strip is allowed to update at
    "lights": [ //List of light x and y positions to sample from screen. (0.0,0.0) is top left, (1.0,1.0) is bottom right.
      {
        "x": 0.0,
        "y": 0.0
      }
    ]
  }
}